#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>

/*
Написать программу, которая на заданном интервале [a,b]
находит и выводит в консольное окно все числа палиндромы.
Значения a и b запрашиваются у пользователя.
Значения a и b целые положительные числа ( a<b ).
Организовать вывод в консоль найденных чисел так, чтобы
в каждой строке консольного окна выводилось 5-ть чисел.
Последняя строка консольного окна может быть заполнена не
полностью.
*/

int main()
/*
Исходя из формального определения палиндрома:
    {
        если
            x = a1a2a3a4a5...a(N-1)aN
            y = aNa(N-1)...a5a4a3a2a1
        и при том
            x = y
        следовательно
            x - палиндром
    }
- и того факта, что цепочка символов алфавита, содержащая нуль символов, также явялется палиндромом,
следует, что число, состоящее из единственной цифры, также явялется палиндромом.
Вместе с тем, поскольку вывод одноразрядных чисел тривиален и не дает представления о работе программы,
пользователю при вводе значений диапазона предлагается выбрать, печатать ли одноразрядные числа
или нет.
*/
{
    int a, b, tmp; //переменные для вводимых чисел и хранения промежуточных результатов
    int i, j, k; //счетчики
    int power_var(1); /*
                      переменная для возведения числа в сетпень
                      (используется для вычисления длины массива,
                      хранящего значения разрядов)
                      */
    int *store(NULL); //указатель для выделения массива
    int print_flag(0); //флаг для печати числа
    int sdn_print_flag; //флаг для печати одноразрядных чисел
    int print_counter(0); //счетчик количества выводимых в строке палиндромов

    printf("=============================\n");
    printf("Input two integers\n");
    scanf("%d", &a);
    scanf("%d", &b);
    printf("Your input is:\n\ta = %d\n\tb = %d\n", a, b);
    printf("=============================\n");

    //Определить порядок чисел, присвоить переменной 'a' меньшее из введенных чисел, а 'b' - большее
 
    if (a > b)
        {
            printf("a is bigger than b\n");
            tmp = a;
            a = b;
            b = tmp;
            printf("Variables after exchange of values:\n\ta = %d\n\tb = %d\n", a, b);
            printf("=============================\n");
        }
    
    if (b<10 || a<10)
        {
            printf("Print single digit numbers?[0=N/1=Y]\n");
            scanf("%d", &sdn_print_flag);
            printf("Your input: '%d'\n", sdn_print_flag);
            printf("=============================\n");
        }

    //Выделение памяти под массив необходимой длины для хранения цифр в разрядах чисел
 
    for (i=0; b!=(b%power_var); i++, power_var *= 10); //подсчет необходимого количества ячеек в массиве по максимальному введенному значению
    
    store = (int*) calloc(i, sizeof(int)); //выделение памяти для массива

    printf("Array length: %d\n", i);
    printf("=============================\n");
        
    //Цикл, в котором будет происходить поиск палиндромов
    
    for (; a<(b+1); a++)
        {
            tmp = a;

            i = 0; //обнуление счетчика
            do //цикл заполнения массива
                {
                    *(store+i) = tmp%10;
                    i++;
                }
            while (tmp/=10); //окончание цикла заполнения массива
            i--; //приведение значения счетчика к номеру последнего элемента в массиве

            //проверка на палиндром
            for (j=0, k=i; (j<(i+1)) && (k>(-1)); j++, k--)
                {
                    if (*(store+j) != *(store+k))
                        {
                            print_flag = 0;
                            break;
                        }
                    print_flag = 1;
                }
            
            //печать числа, если оно палиндром
            if (print_flag)
                if (sdn_print_flag==0 && i==0) //проверка, необходимо ли печатать одноразрядные числа
                    continue;
                else
                    {
                        if (print_counter == 5)
                        {
                            print_counter = 0;
                            printf("\n");
                        }
                        print_counter++;
                        printf("\t%d\t", a);
                    }
        }
    
    free( (void*) store); //освобождение памяти, выделенной под массив

    getch();
	return 0;
}